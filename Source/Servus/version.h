// generated by CommonLibrary.cmake, do not edit.

/**
 * @file include/servus/version.h
 * Defines version macros and class for library Servus.
 */

#ifndef SERVUS_VERSION_H
#define SERVUS_VERSION_H

#include <servus/api.h>
#include <string>

namespace servus
{
    /** The current major version. */
#   define SERVUS_VERSION_MAJOR 1

    /** The current minor version. */
#   define SERVUS_VERSION_MINOR 6

    /** The current patch level. */
#   define SERVUS_VERSION_PATCH 0

    /** The current SCM revision. */
#   define SERVUS_VERSION_REVISION 0x0

    /** The current binary interface. */
#   define SERVUS_VERSION_ABI 6ull

    /** The current major.minor.version as a string. */
#   define SERVUS_VERSION_STRING \
    "1.6.0"

    /** The current major.minor.version.revision as a string. */
#   define SERVUS_REV_STRING \
    "1.6.0.0x0"

/** True if the current version is newer than the given one. */
#   define SERVUS_VERSION_GT( MAJOR, MINOR, PATCH )       \
    ( (SERVUS_VERSION_MAJOR>MAJOR) ||                     \
      (SERVUS_VERSION_MAJOR==MAJOR && (SERVUS_VERSION_MINOR>MINOR || \
          (SERVUS_VERSION_MINOR==MINOR && SERVUS_VERSION_PATCH>PATCH))))

/** True if the current version is equal or newer to the given. */
#   define SERVUS_VERSION_GE( MAJOR, MINOR, PATCH )       \
    ( (SERVUS_VERSION_MAJOR>MAJOR) ||                     \
      (SERVUS_VERSION_MAJOR==MAJOR && (SERVUS_VERSION_MINOR>MINOR || \
          (SERVUS_VERSION_MINOR==MINOR && SERVUS_VERSION_PATCH>=PATCH))))

/** True if the current version is older than the given one. */
#   define SERVUS_VERSION_LT( MAJOR, MINOR, PATCH )       \
    ( (SERVUS_VERSION_MAJOR<MAJOR) ||                     \
      (SERVUS_VERSION_MAJOR==MAJOR && (SERVUS_VERSION_MINOR<MINOR || \
          (SERVUS_VERSION_MINOR==MINOR && SERVUS_VERSION_PATCH<PATCH))))

/** True if the current version is older or equal to the given. */
#   define SERVUS_VERSION_LE( MAJOR, MINOR, PATCH )       \
    ( (SERVUS_VERSION_MAJOR<MAJOR) ||                     \
      (SERVUS_VERSION_MAJOR==MAJOR && (SERVUS_VERSION_MINOR<MINOR || \
        (SERVUS_VERSION_MINOR==MINOR && SERVUS_VERSION_PATCH<=PATCH))))

/** Information about the current Servus version. */
class SERVUS_API Version
{
public:
    /** @return the current major version of Servus. */
    static int getMajor();

    /** @return the current minor version of Servus. */
    static int getMinor();

    /** @return the current patch level of Servus. */
    static int getPatch();

    /** @return the current Servus version (MM.mm.pp). */
    static std::string getString();

    /** @return the SCM revision. */
    static unsigned long long getRevision();

    /** @return the current binary interface version of Servus. */
    static int getABI();

    /** @return the current Servus version plus the git SHA hash (MM.mm.pp.rev). */
    static std::string getRevString();

    /**
     * Runtime check for ABI compatibility.
     *
     * Call from code using Servus. Will fail if the executable
     * was compiled against a version incompatible with the runtime version.
     *
     * @return true if the link-time and compile-time DSO are compatible.
     */
    static bool check()
    {
        return getMajor()==SERVUS_VERSION_MAJOR &&
               getMinor()==SERVUS_VERSION_MINOR;
    }

    /** @return JSON schema describing this object. */
    static std::string getSchema()
    {
        return R"(
                {
                  "title": "Version",
                  "type": "object",
                  "description": "Version information of the running application",
                  "properties": {
                    "major": { "type": "integer" },
                    "minor": { "type": "integer" },
                    "patch": { "type": "integer" },
                    "abi": { "type": "integer" },
                    "revision": { "type": "string" }
                  }
               }
               )";
    }

    /** @return JSON-encoded data for this object. */
    static std::string toJSON()
    {
        return R"(
               {
                 "major": 1,
                 "minor": 6,
                 "patch": 0,
                 "abi": 6,
                 "revision": "0"
               }
               )";
    }
};

}

#endif
